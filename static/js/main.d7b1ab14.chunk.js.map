{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["fetchpage","page","type","fetch","credentials","then","r","json","catch","e","console","error","fetchlisting","uuid","hasSmartSettings","v","localStorage","hasOwnProperty","item","profit","card","Math","round","best_sell_price","best_buy_price","profitpct","mps","l","mostrecent","Date","completed_orders","date","getTime","filter","o","length","spm","medsell","hoursworth","map","t","Number","price","replace","sort","reverse","buys","slice","medbuy","medprofit","cardsummary","details","profit_amount","profit_percent","med_buy","undefined","med_sell","med_profit","ppm","Card","addDetail","loadAnyway","useState","fetching","setFetching","ref","useRef","isVisible","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","useEffect","observe","current","disconnect","useOnScreen","shouldHide","style","display","href","target","listing_name","ovr","rarity","series","team","toLocaleString","toFixed","textAlign","App","low","high","min","now","instantiated","setInstantiated","cards","setCards","a","sorter","setSorter","min_rank","max_rank","setCriteria","setDetails","spmMin","setSpmMin","roiMin","setRoiMin","lowLimit","setLowLimit","highLimit","setHighLimit","setLoadAnyway","args","some","fn","or","every","and","c","hasSPMMin","meownfuckinsorter","meownfuckinsort","b","total_pages","pages","fetchedarr","Array","fill","_","i","p","forEach","newc","listings","concat","Promise","all","className","max","value","onChange","onClick","random","detail","Object","assign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.d7b1ab14.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport './App.css';\n/**\nimport cards from './cards.json'\nlet fetchpage = async (page=1, type='mlb_card') => {\n  const firstcard = (page-1) * 100\n  const lastcard = (page) * 100\n  return ((cards) => {\n  return new Promise((res) => setTimeout(() => res({\n      total_pages: Math.ceil(cards.length / 100),\n      listings: cards.slice(firstcard,lastcard),\n  }), Math.random() * 100 + 100))\n  })(cards.slice(0, 500))\n}\nlet fetchlisting = (uuid) => new Promise((res) => setTimeout(() => res({\n  \"listing_name\":\"Roberto Clemente\",\"best_sell_price\":5777,\"best_buy_price\":5000,\"item\":{\"uuid\":\"73d20b039c7607c58dd816c7e9fa29ed\",\"img\":\"https://mlb21.theshow.com/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBazFqIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--b5b71c30bee4c37b8143731bc4ca534480b72244/083d683764ed459d148692a20e43a182.jpg\",\"name\":\"Roberto Clemente\",\"rarity\":\"Diamond\",\"team\":\"Pirates\",\"ovr\":85,\"series\":\"Veteran\"},\"price_history\":[{\"date\":\"5/07\",\"best_buy_price\":0,\"best_sell_price\":5000},{\"date\":\"5/06\",\"best_buy_price\":0,\"best_sell_price\":5600},{\"date\":\"5/05\",\"best_buy_price\":0,\"best_sell_price\":5733},{\"date\":\"5/04\",\"best_buy_price\":0,\"best_sell_price\":5250},{\"date\":\"5/03\",\"best_buy_price\":0,\"best_sell_price\":5501},{\"date\":\"5/02\",\"best_buy_price\":0,\"best_sell_price\":5400},{\"date\":\"5/01\",\"best_buy_price\":0,\"best_sell_price\":5500},{\"date\":\"4/30\",\"best_buy_price\":5000,\"best_sell_price\":5655},{\"date\":\"4/29\",\"best_buy_price\":5000,\"best_sell_price\":5598},{\"date\":\"4/28\",\"best_buy_price\":0,\"best_sell_price\":5200},{\"date\":\"4/27\",\"best_buy_price\":0,\"best_sell_price\":5699},{\"date\":\"4/26\",\"best_buy_price\":0,\"best_sell_price\":5500},{\"date\":\"4/25\",\"best_buy_price\":5000,\"best_sell_price\":5490},{\"date\":\"4/24\",\"best_buy_price\":5000,\"best_sell_price\":5300},{\"date\":\"4/23\",\"best_buy_price\":5000,\"best_sell_price\":5500},{\"date\":\"4/22\",\"best_buy_price\":0,\"best_sell_price\":5555},{\"date\":\"4/21\",\"best_buy_price\":0,\"best_sell_price\":5699},{\"date\":\"4/20\",\"best_buy_price\":5000,\"best_sell_price\":5500},{\"date\":\"4/19\",\"best_buy_price\":0,\"best_sell_price\":5799},{\"date\":\"4/18\",\"best_buy_price\":0,\"best_sell_price\":5000},{\"date\":\"4/17\",\"best_buy_price\":0,\"best_sell_price\":5000},{\"date\":\"4/16\",\"best_buy_price\":0,\"best_sell_price\":0},{\"date\":\"4/15\",\"best_buy_price\":0,\"best_sell_price\":0}],\"completed_orders\":[{\"date\":\"5/8/2021 12:34:53 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:34:50 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:34:36 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:34:27 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:34:25 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:34:01 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:33:57 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:33:18 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:33:18 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:59 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:52 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:32:51 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:48 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:37 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:35 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:32:32 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:26 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:32:18 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:10 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:32:04 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:31:56 AM\",\"price\":\"5,770\"},{\"date\":\"5/8/2021 12:31:49 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:31:38 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:31:33 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:31:28 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:31:19 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:31:00 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:30:38 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:30:09 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:30:05 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:29:24 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:29:15 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:29:11 AM\",\"price\":\"5,700\"},{\"date\":\"5/8/2021 12:28:58 AM\",\"price\":\"5,699\"},{\"date\":\"5/8/2021 12:28:13 AM\",\"price\":\"5,600\"},{\"date\":\"5/8/2021 12:28:08 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:27:11 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:26:41 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:26:23 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:53 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:48 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:48 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:25:48 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:45 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:43 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:25:42 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:33 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:25:32 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:32 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:25:29 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:28 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:16 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:25:05 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:25:03 AM\",\"price\":\"5,750\"},{\"date\":\"5/8/2021 12:24:58 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:24:56 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:24:53 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:24:49 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:24:42 AM\",\"price\":\"5,001\"},{\"date\":\"5/8/2021 12:24:38 AM\",\"price\":\"5,001\"},{\"date\":\"5/8/2021 12:24:35 AM\",\"price\":\"5,001\"},{\"date\":\"5/8/2021 12:24:33 AM\",\"price\":\"5,775\"},{\"date\":\"5/8/2021 12:24:06 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:24:01 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:23:56 AM\",\"price\":\"5,001\"},{\"date\":\"5/8/2021 12:23:52 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:23:47 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:23:31 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:23:26 AM\",\"price\":\"5,001\"},{\"date\":\"5/8/2021 12:23:19 AM\",\"price\":\"5,001\"},{\"date\":\"5/8/2021 12:23:16 AM\",\"price\":\"5,004\"},{\"date\":\"5/8/2021 12:22:37 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:22:35 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:22:24 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:22:10 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:22:08 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:22:02 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:21:26 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:21:24 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:21:05 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:20:59 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:20:57 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:20:53 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:20:35 AM\",\"price\":\"5,775\"},{\"date\":\"5/8/2021 12:20:32 AM\",\"price\":\"5,700\"},{\"date\":\"5/8/2021 12:20:21 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:20:16 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:20:14 AM\",\"price\":\"5,775\"},{\"date\":\"5/8/2021 12:20:13 AM\",\"price\":\"5,775\"},{\"date\":\"5/8/2021 12:20:11 AM\",\"price\":\"5,700\"},{\"date\":\"5/8/2021 12:20:09 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:20:00 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:19:53 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:19:49 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:19:41 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:19:40 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:19:29 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:19:29 AM\",\"price\":\"5,775\"},{\"date\":\"5/8/2021 12:19:22 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:54 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:47 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:43 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:18:39 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:34 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:32 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:27 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:18:24 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:16 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:14 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:18:01 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:17:23 AM\",\"price\":\"5,775\"},{\"date\":\"5/8/2021 12:17:22 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:17:18 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:17:17 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:17:00 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:16:59 AM\",\"price\":\"5,766\"},{\"date\":\"5/8/2021 12:16:57 AM\",\"price\":\"5,770\"},{\"date\":\"5/8/2021 12:16:56 AM\",\"price\":\"5,768\"},{\"date\":\"5/8/2021 12:16:55 AM\",\"price\":\"5,766\"},{\"date\":\"5/8/2021 12:16:38 AM\",\"price\":\"5,767\"},{\"date\":\"5/8/2021 12:16:22 AM\",\"price\":\"5,767\"},{\"date\":\"5/8/2021 12:16:04 AM\",\"price\":\"5,765\"},{\"date\":\"5/8/2021 12:15:39 AM\",\"price\":\"5,600\"},{\"date\":\"5/8/2021 12:15:17 AM\",\"price\":\"5,769\"},{\"date\":\"5/8/2021 12:15:01 AM\",\"price\":\"5,769\"},{\"date\":\"5/8/2021 12:15:00 AM\",\"price\":\"5,769\"},{\"date\":\"5/8/2021 12:14:59 AM\",\"price\":\"5,769\"},{\"date\":\"5/8/2021 12:14:57 AM\",\"price\":\"5,768\"},{\"date\":\"5/8/2021 12:14:00 AM\",\"price\":\"5,768\"},{\"date\":\"5/8/2021 12:13:41 AM\",\"price\":\"5,750\"},{\"date\":\"5/8/2021 12:13:14 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:12:41 AM\",\"price\":\"5,768\"},{\"date\":\"5/8/2021 12:12:29 AM\",\"price\":\"5,768\"},{\"date\":\"5/8/2021 12:12:14 AM\",\"price\":\"5,500\"},{\"date\":\"5/8/2021 12:12:07 AM\",\"price\":\"5,300\"},{\"date\":\"5/8/2021 12:11:48 AM\",\"price\":\"5,750\"},{\"date\":\"5/8/2021 12:11:44 AM\",\"price\":\"5,745\"},{\"date\":\"5/8/2021 12:11:14 AM\",\"price\":\"5,700\"},{\"date\":\"5/8/2021 12:10:28 AM\",\"price\":\"5,500\"},{\"date\":\"5/8/2021 12:10:17 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:10:09 AM\",\"price\":\"5,776\"},{\"date\":\"5/8/2021 12:09:38 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:08:57 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:08:44 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:08:43 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:08:09 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:07:31 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:07:18 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:07:03 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:07:02 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:07:01 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:07:01 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:06:56 AM\",\"price\":\"5,777\"},{\"date\":\"5/8/2021 12:06:42 AM\",\"price\":\"5,775\"},{\"date\":\"5/8/2021 12:06:39 AM\",\"price\":\"5,774\"},{\"date\":\"5/8/2021 12:06:13 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:05:51 AM\",\"price\":\"5,772\"},{\"date\":\"5/8/2021 12:05:45 AM\",\"price\":\"5,771\"},{\"date\":\"5/8/2021 12:05:41 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:05:36 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:05:33 AM\",\"price\":\"5,771\"},{\"date\":\"5/8/2021 12:05:24 AM\",\"price\":\"5,770\"},{\"date\":\"5/8/2021 12:05:00 AM\",\"price\":\"5,750\"},{\"date\":\"5/8/2021 12:04:56 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:04:46 AM\",\"price\":\"5,500\"},{\"date\":\"5/8/2021 12:04:19 AM\",\"price\":\"5,774\"},{\"date\":\"5/8/2021 12:04:18 AM\",\"price\":\"5,774\"},{\"date\":\"5/8/2021 12:04:04 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:03:52 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:03:31 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:03:18 AM\",\"price\":\"5,770\"},{\"date\":\"5/8/2021 12:03:03 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:02:17 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:02:15 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:02:10 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:01:56 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:01:49 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:01:36 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:01:16 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:01:12 AM\",\"price\":\"5,000\"},{\"date\":\"5/8/2021 12:00:59 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:00:48 AM\",\"price\":\"5,773\"},{\"date\":\"5/8/2021 12:00:38 AM\",\"price\":\"5,600\"},{\"date\":\"5/8/2021 12:00:08 AM\",\"price\":\"5,500\"},{\"date\":\"5/7/2021 11:59:54 PM\",\"price\":\"5,000\"},{\"date\":\"5/7/2021 11:59:39 PM\",\"price\":\"5,000\"},{\"date\":\"5/7/2021 11:59:02 PM\",\"price\":\"5,773\"},{\"date\":\"5/7/2021 11:58:55 PM\",\"price\":\"5,002\"},{\"date\":\"5/7/2021 11:58:45 PM\",\"price\":\"5,772\"},{\"date\":\"5/7/2021 11:58:42 PM\",\"price\":\"5,771\"},{\"date\":\"5/7/2021 11:58:31 PM\",\"price\":\"5,500\"},{\"date\":\"5/7/2021 11:57:29 PM\",\"price\":\"5,000\"},{\"date\":\"5/7/2021 11:57:24 PM\",\"price\":\"5,770\"},{\"date\":\"5/7/2021 11:57:20 PM\",\"price\":\"5,769\"},{\"date\":\"5/7/2021 11:57:15 PM\",\"price\":\"5,000\"},{\"date\":\"5/7/2021 11:57:13 PM\",\"price\":\"5,000\"},{\"date\":\"5/7/2021 11:57:09 PM\",\"price\":\"5,000\"},{\"date\":\"5/7/2021 11:57:08 PM\",\"price\":\"5,000\"},{\"date\":\"5/7/2021 11:56:50 PM\",\"price\":\"5,744\"},{\"date\":\"5/7/2021 11:56:48 PM\",\"price\":\"5,000\"}]\n}), Math.random() * 100 + 100))\n//*/\n\n\n//**\nlet fetchpage = (page=1, type='mlb_card') =>\n  // fetch(`https://mlb21.theshow.com/apis/listings.json?type=${type}&page=${page}`, {\n  fetch(`https://mlb21.theshow.com/apis/listings.json?type=${type}&page=${page}&min_rank=82`, {\n    credentials: 'omit',\n  }).then(r => r.json()).catch(e => {\n    console.error(e)\n    // TODO: uncomment\n    // return fetchpage(page, type)\n  })\nlet fetchlisting = (uuid) => fetch(`https://mlb21.theshow.com/apis/listing.json?uuid=${uuid}`, {\n    credentials: 'omit',\n  }).then(r => r.json()).catch(e => {\n    console.error(e)\n    return fetchlisting(uuid)\n  })\n//*/\n\n/**\n(() => {\nconst addscript = (uri) => {\nlet scrip = document.createElement('script')\nscrip.src = uri\ndocument.body.append(scrip)\n}\naddscript('http://localhost:3000/static/js/bundle.js')\naddscript('http://localhost:3000/static/js/vendors~main.chunk.js')\naddscript('http://localhost:3000/static/js/main.chunk.js')\n})()\n*/\n// console.log( cards )\n/**\n    {\n        \"listing_name\": \"Rob Kaminsky\",\n        \"best_sell_price\": 168,\n        \"best_buy_price\": 72,\n        \"item\": {\n            \"uuid\": \"b14ab177881b4c06b81317c5f2034ede\",\n            \"img\": \"https://mlb21.theshow.com/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBaEJkIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--8f76e6b9caa02a4e2d5e25164e19c9ce2c0bd7fd/default-actionshot.jpg\",\n            \"name\": \"Rob Kaminsky\",\n            \"rarity\": \"Common\",\n            \"team\": \"Free Agents\",\n            \"ovr\": 46,\n            \"series\": \"Live\"\n        }\n    }\n**/\n\n\nexport function useOnScreen(ref) {\n  const [isIntersecting, setIntersecting] = useState(false)\n  const observer = new IntersectionObserver(\n    ([entry]) => setIntersecting(entry.isIntersecting)\n  )\n  useEffect(() => {\n    observer.observe(ref.current)\n    // Remove the observer as soon as the component is unmounted\n    return () => { observer.disconnect() }\n  }, [])\n  return isIntersecting\n}\n\n\n// const sortedbyroi = cards => [...cards].sort((ca,cb) => (profitpct(cb) || 0) - (profitpct(ca) || 0))\nconst sortedbyovr = cards => cards.sort((ca,cb) => (cb.item.ovr - ca.item.ovr))\n\n// const filterRating = (low, high) => card => cards.filter(c => c.item.ovr >= low && c.item.ovr <= high)\nconst filterRating = (low, high) => c => c.item.ovr >= low && c.item.ovr <= high\nconst and = (...args) => v => args.every(fn => fn(v))\nconst or = (...args) => v => args.some(fn => fn(v))\nconst hasSmartSettings = v => localStorage.hasOwnProperty(v.item.uuid)\nconst hasRoiMin = min => v => profitpct(v) >= min\n\nfunction App() {\n  const [instantiated, setInstantiated] = useState(Date.now())\n  const [cards, setCards] = useState([])\n  // const [sorter, setSorter] = useState(() => () => 0)\n  const [sorter, setSorter] = useState(() => (a) => a.item.ovr % 10)\n  // unused\n  const [criteria, setCriteria] = useState({ min_rank: null, max_rank: null })\n  const [details, setDetails] = useState({})\n  const [spmMin, setSpmMin] = useState(0)\n  const [roiMin, setRoiMin] = useState(0)\n  const [lowLimit, setLowLimit] = useState(90)\n  const [highLimit, setHighLimit] = useState(99)\n  const [loadAnyway, setLoadAnyway] = useState(false)\n\n  const hasSPMMin = min => c => details[c.item.uuid] ? spm(details[c.item.uuid]) >= min : true\n  const filter = or(and(hasRoiMin(roiMin), filterRating(lowLimit, highLimit), hasSPMMin(spmMin)), hasSmartSettings)\n  // const meownfuckinsorter = c => cardsummary(c, details[c.item.uuid]).ppm || 0\n  const meownfuckinsorter = c => details[c.item.uuid] ? (details[c.item.uuid].med_profit || 0) * (details[c.item.uuid].spm || 0) : 0\n  const meownfuckinsort = (a, b) => meownfuckinsorter(a) > meownfuckinsorter(b) ? -1 : meownfuckinsorter(a) < meownfuckinsorter(b) ? 1 : 0\n\n  useEffect(() => {\n    const p1 = fetchpage(1)\n    let fetchall = (type) => p1.then(r => r.total_pages).then( pages => {\n      let cards = []\n      const fetchedarr = Array(pages).fill(0).map((_, i) => i + 1)\n          .map(p => fetchpage(p))\n      fetchedarr.forEach(async p => {\n        const newc = (await p).listings\n        setCards(cards => cards.concat(newc).sort(meownfuckinsort))\n      })\n      return Promise.all(fetchedarr)\n    })\n    fetchall()\n     // setCards((await fetchall()).flatMap(l => l))\n  }, [instantiated])\n\n  return (\n    <div className=\"App\">\n      <div>\n        Low: <input type=\"range\"\n          min={70}\n          max={99}\n          value={Math.min(lowLimit, highLimit)}\n          onChange={e => setLowLimit(Math.min(+e.target.value, highLimit))}\n        /> {lowLimit}\n        High: <input type=\"range\"\n          min={70}\n          max={99}\n          value={Math.max(lowLimit, highLimit)}\n          onChange={e => setHighLimit(Math.max(+e.target.value, lowLimit))}\n        /> {highLimit}\n        ROI min: <input type=\"range\"\n          min={-100}\n          max={100}\n          value={Math.max(roiMin)}\n          onChange={e => setRoiMin(+e.target.value)}\n        /> {roiMin}\n        SPM min: <input type=\"range\"\n          min={0}\n          max={100}\n          value={spmMin * 10}\n          onChange={e => setSpmMin(+(e.target.value) / 10)}\n        /> {spmMin}\n        </div>\n        <div>\n        <button onClick={() => setCriteria({\n          min_rank: lowLimit,\n          max_rank: highLimit,\n        })}>Search</button>\n        <button onClick={() => setLoadAnyway(true)}>Load Details</button>\n        <button onClick={() => {\n          setCards([])\n          setDetails({})\n          setInstantiated(Date.now())\n        }}>Reset</button>\n      </div>\n      <table>\n\n\n\n\n\n\n\n      <thead>\n          <tr>\n          <th onClick={ () => setSorter(() => c => c.listing_name) }>Name</th>\n          <th onClick={ () => setSorter(() => c => c.item.ovr) }>Overall</th>\n          <th onClick={ () => setSorter(() => card => card.item.rarity ) }>Rarity</th>\n          <th onClick={ () => setSorter(() => card => card.item.series ) }>Series</th>\n          <th onClick={ () => setSorter(() => card => card.item.team ) }>Team</th>\n          <th onClick={ () => setSorter(() => card => card.best_buy_price ) }>Best Buy</th>\n          <th onClick={ () => setSorter(() => card => card.best_sell_price ) }>Best Sell</th>\n          <th onClick={ () => setSorter(() => profit) }>Profit</th>\n          <th onClick={ () => setSorter(() => profitpct) }>ROI%</th>\n          <th onClick={ () => setSorter(() => c => cardsummary(c, details[c.item.uuid]).mps || 0) }>M/S</th>\n          <th onClick={ () => setSorter(() => c => cardsummary(c, details[c.item.uuid]).spm || 0) }>S/M</th>\n          <th onClick={ () => setSorter(() => meownfuckinsorter) }>PPM</th>\n    </tr>\n      </thead>\n      <tbody>\n      {/* filtered(cards).map(c => <Card key={c.item.uuid} card={c} />) */}\n      { (cards)\n          .filter(filter)\n          // .sort(meownfuckinsort)\n          .sort((a,b) => sorter(a) > sorter(b) ? -Math.random() : sorter(a) < sorter(b) ? Math.random() : 0 )\n          .map(c =>\n          <Card key={c.item.uuid}\n            card={cardsummary(c, details[c.item.uuid])}\n            filter={filter}\n            details={details[c.item.uuid]}\n            loadAnyway={loadAnyway}\n            addDetail={detail => {\n              // debugger\n              setDetails(details => Object.assign({}, details, { [c.item.uuid]: detail }))\n            }}\n            />)\n        }\n      </tbody></table>\n    </div>\n  );\n}\n\nconst profit = card => Math.round(card.best_sell_price * .9 - card.best_buy_price)\nconst profitpct = card => Math.round((profit(card) / card.best_buy_price) * 100)\nlet mps = l => {\n  let mostrecent = (new Date(l.completed_orders[0].date)).getTime()\n  let hoursworth = l.completed_orders.filter(o => (new Date(o.date)).getTime() > mostrecent - 1000 * 60 * 60)\n  return (60) / hoursworth.length\n\n  let first = (new Date(l.completed_orders.slice(-1)[0].date)).getTime()\n  let last = (new Date(l.completed_orders[0].date)).getTime()\n  let tot = l.completed_orders.length\n  return (last - first) / tot / (1000 * 60)\n}\nlet spm = l => {\n  let mostrecent = (new Date(l.completed_orders[0].date)).getTime()\n  let hoursworth = l.completed_orders.filter(o => (new Date(o.date)).getTime() > mostrecent - 1000 * 60 * 60)\n  return hoursworth.length / 60\n}\nconst medsell = l => {\n  let mostrecent = (new Date(l.completed_orders[0].date)).getTime()\n  const price = t => Number(t.price.replace(',', ''))\n  let hoursworth = l.completed_orders.filter(o => (new Date(o.date)).getTime() > mostrecent - 1000 * 60 * 60)\n    .map(price)\n    .sort()\n    .reverse()\n  // hoursworth.sort((ta, tb) => price(tb) - price(ta))\n  const buys = hoursworth.slice(0, Math.round(hoursworth.length / 2))\n  // return price(buys[Math.round(buys.length / 2)])\n  return buys[Math.round(buys.length / 2)]\n}\nconst medbuy = l => {\n  // let mostrecent = (new Date(l.completed_orders[0].date)).getTime()\n  // let hoursworth = l.completed_orders.filter(o => (new Date(o.date)).getTime() > mostrecent - 1000 * 60 * 60)\n  // const price = t => Number(t.price.replace(/,/g, ''))\n  // hoursworth.sort((ta, tb) => price(tb) - price(ta))\n  // const sells = hoursworth.slice(-Math.round(hoursworth.length / 2))\n  // return price(sells[Math.round(sells.length / 2)])\n  let mostrecent = (new Date(l.completed_orders[0].date)).getTime()\n  const price = t => Number(t.price.replace(',', ''))\n  let hoursworth = l.completed_orders.filter(o => (new Date(o.date)).getTime() > mostrecent - 1000 * 60 * 60)\n    .map(price)\n    .sort()\n    .reverse()\n  // hoursworth.sort((ta, tb) => price(tb) - price(ta))\n  const buys = hoursworth.slice(-Math.round(hoursworth.length / 2))\n  // return price(buys[Math.round(buys.length / 2)])\n  return buys[Math.round(buys.length / 2)]\n}\n\nconst medprofit = l => {\n  return medsell(l) * .9 - medbuy(l)\n}\nconst cardsummary = (card, details) => ({\n  ...card,\n  profit_amount: profit(card),\n  profit_percent: profitpct(card),\n  med_buy: details ? details.med_buy : undefined,\n  med_sell: details ? details.med_sell : undefined,\n  med_profit: details ? details.med_profit : undefined,\n  mps: details ? mps(details) : undefined,\n  spm: details ? spm(details) : undefined,\n  // ppm: details ? Math.round(profit(card) / mps(details)) : undefined,\n  // ppm: details ? medprofit(details) * spm(details) : undefined,\n  ppm: details ? Math.round(details.med_profit * details.spm) : undefined,\n})\nconst cardsummaryz = (card, details) => {\n  const {\n    listing_name,\n    item: {\n      uuid,\n      ovr,\n      rarity,\n      series,\n      team,\n    },\n    best_buy_price,\n    best_sell_price,\n  } = card;\n  const [ profit_amount, profit_percent ] = [ profit(card), profitpct(card) ]\n  return ({\n  listing_name,\n  uuid,\n  item: {\n    uuid,\n    ovr,\n    rarity,\n    series,\n    team,\n  },\n  ovr,\n  rarity,\n  series,\n  team,\n  best_buy_price,\n  best_sell_price,\n  profit_amount,\n  profit_percent,\n  med_buy: details ? medbuy(details) : undefined,\n  med_sell: details ? medsell(details) : undefined,\n  med_profit: details ? medprofit(details) : undefined,\n  mps: details ? mps(details) : undefined,\n  spm: details ? spm(details) : undefined,\n  // ppm: details ? Math.round(profit(card) / mps(details)) : undefined,\n  // ppm: details ? medprofit(details) * spm(details) : undefined,\n  /*\n  listing_name: card.listing_name\n  ovr: card.item.ovr\n  rarity: card.item.rarity\n  series: card.item.series\n  team: card.item.team\n  best_buy_price: card.best_buy_price\n  best_sell_price: card.best_sell_price\n  profit: (profit(card))\n  profitpct: profitpct(card)\n  */\n  /*\n  card.listing_name,\n  card.item.ovr,\n  card.item.rarity,\n  card.item.series,\n  card.item.team,\n  card.best_buy_price,\n  card.best_sell_price,\n  */\n  // profit: (profit(card)),\n  // profitpct: profitpct(card),\n  // mps: details ? mps(details) : undefined,\n  // spm: details ? spm(details) : undefined,\n  // ppm: details ? Math.round(profit(card) / mps(details)),\n})\n}\nconst Card = ({ card, filter, addDetail, details, loadAnyway }) => {\n  const [ fetching, setFetching ] = useState(false)\n  const ref = useRef()\n  const isVisible = useOnScreen(ref)\n  const shouldHide = !filter(card)\n  useEffect(() => {\n    if (details) return;\n    if (shouldHide || fetching || !(isVisible || loadAnyway)) return;\n    setFetching(true)\n    fetchlisting(card.item.uuid)\n      .then(v => {\n        // setDetails(v)\n        setFetching(false)\n        addDetail({...v, med_buy: medbuy(v), med_sell: medsell(v), med_profit: medprofit(v), spm: spm(v), mps: mps(v) })\n      })\n  }, [isVisible, fetching, card.item.uuid, addDetail, loadAnyway, shouldHide])\n\n  return (\n    <tr ref={ref} style={{display: filter(card) ? '' : 'none' }}>\n    <td><a href={`/items/${card.item.uuid}`} target=\"_blank\">{ hasSmartSettings(card) && '**' }{ card.listing_name }</a></td>\n    <td>{ card.item.ovr }</td>\n    <td>{ card.item.rarity }</td>\n    <td>{ card.item.series }</td>\n    <td>{ card.item.team }</td>\n    <td>{ card.best_buy_price.toLocaleString() }</td>\n    <td>{ card.best_sell_price.toLocaleString() }</td>\n    <td>{ card.profit_amount.toLocaleString() }</td>\n    <td>{ card.profit_percent }%</td>\n    <td>{ card.mps != null ? card.mps.toFixed(1) : fetching ? '...' : 'MPS' }</td>\n    <td>{ card.spm != null ? card.spm.toFixed(1) : fetching ? '...' : 'SPM' }</td>\n    <td style={{ textAlign: 'right' }}>{ card.ppm != null ? card.ppm.toLocaleString() : fetching ? '...' : 'PPM' }</td>\n    </tr>\n    )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  // document.getElementById('root')\n  document.querySelector('body')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}